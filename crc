def ascii_to_binary(text):
    binary = ""
    for char in text:
        binary += format(ord(char), '08b')
    return binary

def xor(dividend, divisor):
    result = []
    for i in range(len(divisor)):
        result.append(str(int(dividend[i]) ^ int(divisor[i])))
    return ''.join(result)

def crc_generator(dataword, generator):
    dataword = dataword + '0' * (len(generator) - 1)
    
    dividend = list(dataword)
    divisor = list(generator)
    
    for i in range(len(dividend) - len(divisor) + 1):
        if dividend[i] == '1':
            dividend_section = ''.join(dividend[i:i+len(divisor)])
            res_xor = xor(dividend_section, divisor)
            dividend[i:i+len(divisor)] = list(res_xor)
            
    crc = ''.join(dividend[-(len(generator) - 1):])
    return crc

def generator_transmitted_data(dataword, generator):
    generated_crc = crc_generator(dataword, generator)
    transmitted_data = dataword + generated_crc
    return generated_crc, transmitted_data
    
def error_detection(dataword, generator):
    final_crc = crc_generator(dataword, generator)

    if final_crc == '0' * (len(generator) - 1):
        print("\nNo error detected.")
    else:
        print("\nError detected!")

def main():
    ascii_input = input("Enter ASCII text: ")
    generator = input("Enter generator: ")

    print("\nConverting ASCII to binary....")
    ascii_binary = ascii_to_binary(ascii_input)

    crc, transmitted_data = generator_transmitted_data(ascii_binary, generator)

    print("\nOriginal Dataword:", ascii_binary)
    print("CRC Generated:", crc)
    print("Transmitted Dataword:", transmitted_data)
    
    received_data = input("\nEnter the received dataword for error detection:")
    error_detection(received_data, generator)

if __name__ == "__main__":
    main()
